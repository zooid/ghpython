//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GhPython.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GhPython.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _checked {
            get {
                object obj = ResourceManager.GetObject("_checked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _unchecked {
            get {
                object obj = ResourceManager.GetObject("_unchecked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;This component allows to use both RhinoCommon and RhinoScript from within
        ///Grasshopper. Here some Q&amp;amp;As.&lt;/p&gt;
        ///
        ///&lt;p&gt;&lt;b&gt;How can I use the rhinoscriptsyntax?&lt;/b&gt;&lt;/p&gt;
        ///&lt;p&gt;By importing RhinoScript, for example by writing:&lt;/p&gt;
        ///&lt;pre style=&quot;font-size: smaller&quot;&gt;import rhinoscriptsyntax as rs&lt;/pre&gt;
        ///&lt;p&gt;...and then calling some rhinoscript functions...&lt;/p&gt;
        ///&lt;pre style=&quot;font-size: smaller&quot;&gt;line = rs.AddLine((1, 2, 3), (10, 11, 12))
        ///a = line&lt;/pre&gt;
        ///
        ///&lt;p&gt;&lt;b&gt;How can I use RhinoCommon?&lt;/b&gt;&lt;/p&gt;
        ///&lt;p&gt;By importing from the Rhino  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string helpText {
            get {
                return ResourceManager.GetString("helpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap python {
            get {
                object obj = ResourceManager.GetObject("python", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;&quot;&quot;Constructs a recursive Koch curve.
        ///    Inputs:
        ///        x: The original line. (Line)
        ///        y: The the number of subdivisions. (int)
        ///    Outputs:
        ///        a: The Koch curve, as a list of lines.
        ///&quot;&quot;&quot;
        ///import Rhino.Geometry as rg
        ///import math
        ///
        ///
        ///def Main():
        ///    global a # as usual, you can assign to the global scope with the &quot;global&quot; keyword
        ///    a = []
        ///    SubdivideAndRotate(x, 0)
        ///
        ///def WeightedAvaragePts(pt1, pt2, pt1_part):
        ///    rest = 1 - pt1_part
        ///    return pt1 * rest + pt2 * pt1_part
        ///
        ///def SubdivideAndRotate( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sampleCommon {
            get {
                return ResourceManager.GetString("sampleCommon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # sample script to show how to use this component and the rhinoscriptsyntax
        ///&quot;&quot;&quot;Constructs a sinusoidal series of circles.
        ///  Inputs:
        ///    x: The number of circles. (integer)
        ///    y: The radius of each circle. (float)
        ///  Outputs:
        ///    a: The list of circles. (list of circle)
        ///    b: The list of radii. (list of float)
        ///&quot;&quot;&quot;
        ///import math
        ///import rhinoscriptsyntax as rs
        ///
        ///if x is None:
        ///    x = 24    # if nothing is connected to x, set x to something (24).
        ///if y is None:
        ///    y = 0.3    # if nothing is connected to y, set y  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sampleScript {
            get {
                return ResourceManager.GetString("sampleScript", resourceCulture);
            }
        }
    }
}
